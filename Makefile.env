ARCH=x86_64-nacl
INSTALL_INCLUDE_DIR=$(ZVM_DESTDIR)$(ZVM_PREFIX)/${ARCH}/include
INSTALL_LIB_DIR=$(ZVM_DESTDIR)$(ZVM_PREFIX)/${ARCH}/lib
ZVM_PREFIX_ABSPATH = $(abspath $(ZVM_PREFIX))
ZRT_INCLUDE_PATH= -I${ZVM_PREFIX_ABSPATH}/api \
-I${ZVM_PREFIX_ABSPATH}/x86_64-nacl/include \
-I${ZRT_ROOT}/lib \
-I${ZRT_ROOT}/lib/zcalls \
-I${ZRT_ROOT}/lib/networking \
-I${ZRT_ROOT}/lib/mapreduce \
-I${ZRT_ROOT}/lib/fs \
-I${ZRT_ROOT}/lib/fs/unpack \
-I${ZRT_ROOT}/lib/memory \
-I${ZRT_ROOT}/lib/helpers \
-I${ZRT_ROOT}/lib/nvram \
-I${ZRT_ROOT}/lib/nvram/observers \
-I${ZRT_ROOT}/libports \
-I${ZRT_ROOT}/libports/lua-5.2.1/src \
-I${ZRT_ROOT}/libports/sqlite3 \
-I${ZRT_ROOT}/libports/tar-1.11.8/src \
-I. 

ZRT_LIB_PATH=-L${ZRT_ROOT}/lib

CC=$(ZVM_DESTDIR)${ZVM_PREFIX_ABSPATH}/bin/${ARCH}-gcc
AR=$(ZVM_DESTDIR)${ZVM_PREFIX_ABSPATH}/bin/${ARCH}-ar
CXX=$(ZVM_DESTDIR)${ZVM_PREFIX_ABSPATH}/bin/${ARCH}-g++
RANLIB=$(ZVM_DESTDIR)${ZVM_PREFIX_ABSPATH}/bin/${ARCH}-ranlib
GCOV=$(ZVM_DESTDIR)${ZVM_PREFIX_ABSPATH}/bin/${ARCH}-gcov

ALLOC_REPORT_SRC=${ZRT_ROOT}/lib/alloc_report.c
ALLOC_REPORT_OBJ=${patsubst %.c, %.o, ${ALLOC_REPORT_SRC}}
TRACE_OBJ=${ZRT_ROOT}/lib/ptrace.o
GCOV_DATA_TAR=${ZRT_ROOT}/mounts/gcov.gcda.tar
GCOV_HTML_FOLDER=${ZRT_ROOT}/cov_html
GCOV_TEMP_FOLDER=${ZRT_ROOT}/cov_temp
GCOV_FLAGS= -Wdisabled-optimization -O0 --coverage -fprofile-arcs -ftest-coverage
GCOV_LDFLAGS= -fprofile-arcs

LDFLAGS=${ZRT_LIB_PATH}
LDFLAGS+=--sysroot=${ZRT_ROOT} #fake path
LDFLAGS+=${TRACE_OBJ} ${ALLOC_REPORT_OBJ}
LDFLAGS+= -lpthread -lpth -lcontext #context link order does matter

CPPFLAGS=-c -Wall -Wno-long-long -msse4.1 -m64 -g
CPPFLAGS+=${USER_DEFINED_CFLAGS}
CPPFLAGS+=${ZRT_INCLUDE_PATH}
CPPFLAGS+=--sysroot=${ZRT_ROOT} #fake path
CFLAGS=${CPPFLAGS}
CFLAGS+=${ALLOC_REPORT_CFLAGS}

ALLOC_REPORT_CFLAGS=-DALLOC_REPORT

TRACE_PARSER=${ZRT_ROOT}/tests/trace-parse-hierarchy.py
TRACE_FLAGS=-finstrument-functions -ggdb

ZEROVM=${ZVM_PREFIX_ABSPATH}/bin/zerovm
LCOV_EXIST=$(shell lcov --version 2>/dev/null)


#########################################################################
#Useful scripts can be defined here, like global variables, that
#available to all zrt related makefiles;
#########################################################################

#Parse output from non debug zerovm session; error handling: in case
#if we have in output to many columns - it's probably an error
#occured, then return error code and send 3 lines into output
AWK_GET_ZEROVM_APP_RETURN_CODE=awk '{ \
RESULT="FAIL"; \
if ( NR == 1 && NF > 1) { RETCODE=1; printf "%s %s",RESULT, $$0 } \
if ( (NR == 2 || NR == 3 ) && NF > 1) { RETCODE=1; printf "%s", $$0 } \
else if (NR == 3) { RETCODE=$$1 } \
if (NR == 6) { \
	if (RETCODE == 0) { RESULT="PASS" } \
	else { RESULT="FAIL" } \
	if ($$0 != "ok") { RESULT="FAIL" } \
	print RESULT,"zvmstatus=",$$0 \
} \
}'

#parse output from script 'AWK_GET_ZEROVM_APP_RETURN_CODE'
#get error retcode to system
AWK_HANDLE_FAIL_ON_BAD_ERROR_CODE=awk '{\
if ( match($$0, "PASS zvmstatus") == 0 ) {\
	exit 1 \
	}\
}' 


HANDLE_RETCODE= $(AWK_GET_ZEROVM_APP_RETURN_CODE) | $(AWK_HANDLE_FAIL_ON_BAD_ERROR_CODE)




